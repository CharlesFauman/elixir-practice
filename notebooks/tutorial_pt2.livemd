# Tutorial pt. 2

## Processes

```elixir
pid = spawn(fn -> 1 + 2 end)
```

```elixir
Process.alive?(pid)
```

```elixir
send(self(), {:hello, "1"})
send(self(), {:hello, "2"})
send(self(), {:hello, "3"})
```

```elixir
receive do
  {:hello, msg} -> msg
  {:world, _msg} -> "won't match"
after
  1_000 -> "nothing after 1s"
end
```

```elixir
parent = self()

child_pid = spawn(fn -> send(parent, {:hello, self()}) end)
```

```elixir
receive do
  {:hello, pid} -> "got hello from #{inspect(pid)}"
end
```

```elixir
import IEx.Helpers
flush()
```

```elixir
spawn(fn -> raise "oops" end)
```

```elixir
self()

# Will raise an error:
# spawn_link(fn -> raise "oops" end)
```

```elixir
Task.start(fn -> raise "oops" end)
```

```elixir
defmodule KV do
  def start_link do
    Task.start_link(fn -> loop(%{}) end)
  end

  defp loop(map) do
    receive do
      {:get, key, caller} ->
        send(caller, Map.get(map, key))
        loop(map)

      {:put, key, value} ->
        loop(Map.put(map, key, value))
    end
  end
end
```

```elixir
{:ok, pid} = KV.start_link()
```

```elixir
send(pid, {:get, :hello, self()})
```

```elixir
flush()
```

```elixir
send(pid, {:put, :hello, :world})
```

```elixir
send(pid, {:get, :hello, self()})
```

```elixir
flush()
```

```elixir
Process.register(pid, :kv)
```

```elixir
send(:kv, {:get, :hello, self()})
```

```elixir
flush()
```

```elixir
# Agents encapsulate tasks with state
{:ok, pid} = Agent.start_link(fn -> %{} end)
```

```elixir
Agent.update(pid, fn map -> Map.put(map, :hello, :world) end)
```

```elixir
Agent.get(pid, fn map -> Map.get(map, :hello) end)
```

```elixir
Agent.get(pid, fn map -> Map.get(map, :not_present) end)
```

## IO and the file system

```elixir
IO.puts("hello world")
```

```elixir
res = IO.gets("input name: ")
```

```elixir
IO.puts(:stderr, "hello world")
```

```elixir
{:ok, file} = File.open("hello", [:write])
```

```elixir
IO.binwrite(file, "world")
```

```elixir
File.close(file)
```

```elixir
File.read("hello")
```
