# Tutorial pt. 2

## Processes

```elixir
pid = spawn(fn -> 1 + 2 end)
```

```elixir
Process.alive?(pid)
```

```elixir
send(self(), {:hello, "1"})
send(self(), {:hello, "2"})
send(self(), {:hello, "3"})
```

```elixir
receive do
  {:hello, msg} -> msg
  {:world, _msg} -> "won't match"
after
  1_000 -> "nothing after 1s"
end
```

```elixir
parent = self()

child_pid = spawn(fn -> send(parent, {:hello, self()}) end)
```

```elixir
receive do
  {:hello, pid} -> "got hello from #{inspect(pid)}"
end
```

```elixir
import IEx.Helpers
flush()
```

```elixir
spawn(fn -> raise "oops" end)
```

```elixir
self()

# Will raise an error:
# spawn_link(fn -> raise "oops" end)
```

```elixir
Task.start(fn -> raise "oops" end)
```

```elixir
defmodule KV do
  def start_link do
    Task.start_link(fn -> loop(%{}) end)
  end

  defp loop(map) do
    receive do
      {:get, key, caller} ->
        send(caller, Map.get(map, key))
        loop(map)

      {:put, key, value} ->
        loop(Map.put(map, key, value))
    end
  end
end
```

```elixir
{:ok, pid} = KV.start_link()
```

```elixir
send(pid, {:get, :hello, self()})
```

```elixir
flush()
```

```elixir
send(pid, {:put, :hello, :world})
```

```elixir
send(pid, {:get, :hello, self()})
```

```elixir
flush()
```

```elixir
Process.register(pid, :kv)
```

```elixir
send(:kv, {:get, :hello, self()})
```

```elixir
flush()
```

```elixir
# Agents encapsulate tasks with state
{:ok, pid} = Agent.start_link(fn -> %{} end)
```

```elixir
Agent.update(pid, fn map -> Map.put(map, :hello, :world) end)
```

```elixir
Agent.get(pid, fn map -> Map.get(map, :hello) end)
```

```elixir
Agent.get(pid, fn map -> Map.get(map, :not_present) end)
```

## IO and the file system

```elixir
IO.puts("hello world")
```

```elixir
res = IO.gets("input name: ")
```

```elixir
IO.puts(:stderr, "hello world")
```

```elixir
{:ok, file} = File.open("hello", [:write])
```

```elixir
IO.binwrite(file, "world")
```

```elixir
# The BEAM will close the file when the process that opened it exits
# - unless the exit is abnormal
File.close(file)
```

```elixir
File.read("hello")
```

```elixir
Path.expand("~/hello")
```

```elixir
Path.join("foo", "bar")
```

```elixir
{:ok, file} = File.open("hello", [:write])

File.close(file)

IO.write(file, "is anybody out there")
```

```elixir
pid =
  spawn(fn ->
    receive do: (msg -> IO.inspect(msg))
  end)
```

```elixir
IO.write(pid, "hello")
```

## alias, require, and import

```elixir
defmodule Stats do
  alias Math.List, as: List
  # same as above
  alias Math.List
  # In the remaining module definition List expands to Math.List.
end
```

```elixir
defmodule Math do
  def plus(a, b) do
    alias Math.List
    # ...
  end

  def minus(a, b) do
    # ...
  end
end
```

```elixir
Integer.is_odd(3)
```

```elixir
# allows use of macros defined in the Integer module
require Integer
Integer.is_odd(3)
```

```elixir
# import is like require but don't need the module name anymore!
import Integer, only: [is_odd: 1]
is_odd(2)
```

```elixir
defmodule Math do
  def some_function do
    import List, only: [duplicate: 2]
    duplicate(:ok, 10)
  end
end

Math.some_function()
```

```elixir
duplicate(:ok, 10)
```

```elixir
defmodule AssertionTest do
  use ExUnit.Case, async: true

  test "always pass" do
    assert true
  end
end
```

Don't use `use` when an import or alias would do

```elixir
:"Elixir.String" == String
```

```elixir
is_atom(String)
```

```elixir
to_string(String)
```

```elixir
List.flatten([1, [2], 3])
```

```elixir
:"Elixir.List".flatten([1, [2], 3])
```

```elixir
:lists.flatten([1, [2], 3])
```

```elixir
defmodule Foo do
  defmodule Bar do
  end
end
```

```elixir
defmodule Foo.Bar do
end

defmodule Foo do
  alias Foo.Bar
  # Can still access it as `Bar`
end
```

```elixir
alias MyApp.{Foo, Bar, Baz}
```

## Module attributes

```elixir

```
